services:
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    healthcheck:
      test: ["CMD", "zkServer.sh", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - train-network

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"  # Ensures train-tasks is created if not present
      ALLOW_PLAINTEXT_LISTENER: "yes"
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - train-network

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: train_db
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand({ping: 1})"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - train-network

  api-gateway:
    image: api-gateway:1.0
    container_name: api-gateway
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      SPRING_DATA_MONGODB_URI: "mongodb://mongodb:27017/train_db"
      SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"  # Matches application.properties
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: always
    networks:
      - train-network

  task-scheduler:
    image: task-scheduler:1.0
    container_name: task-scheduler
    build:
      context: ./task-scheduler
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      KAFKA_BROKER: "kafka:9092"
    volumes:
      - ./task-scheduler/config:/app/config
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: ["/app/wait-for-kafka.sh", "/app/scheduler"]
    restart: always
    networks:
      - train-network

networks:
  train-network:
    driver: bridge

volumes:
  mongodb_data: